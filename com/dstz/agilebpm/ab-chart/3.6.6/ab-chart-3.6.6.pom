<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.dstz.agilebpm</groupId>
        <artifactId>agile-bpm</artifactId>
        <version>3.6.6</version>
    </parent>

    <artifactId>ab-chart</artifactId>
    <packaging>pom</packaging>

    <modules>
        <module>chart-api</module>
        <module>chart-core</module>
        <module>chart-rest</module>
    </modules>
	<!-- deploy 服务器 -->
	<distributionManagement>
		<repository>
			<id>rocan-nexus</id>
			<url>http://192.168.1.111:8081/repository/maven-releases/</url>
		</repository>

		<snapshotRepository>
			<id>rocan-nexus</id>
			<url>http://192.168.1.111:8081/repository/maven-snapshots/</url>
		</snapshotRepository>
	</distributionManagement>

	<repositories>
		<repository>
			<id>rocan-nexus</id>
			<url>http://192.168.1.111:8081/repository/maven-public/</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>rocan-nexus</id>
			<url>http://192.168.1.111:8081/repository/maven-public/</url>
		</pluginRepository>
	</pluginRepositories>
	 <build>
        	<pluginManagement>
        		<plugins>
        			<plugin>
		                <groupId>com.github.wvengen</groupId>
		                <artifactId>proguard-maven-plugin</artifactId>
		                <version>2.0.11</version>
		                <executions>
		                    <execution>
		                        <phase>package</phase>
		                        <goals>
		                            <goal>proguard</goal>
		                        </goals>
		                    </execution>
		                </executions>
		                <configuration>
                            <maxMemory>768m</maxMemory>
		                    <!-- 是否将生成的PG文件安装部署-->
		                    <attach>true</attach>
		                    <!-- 是否混淆-->
		                    <obfuscate>true</obfuscate>
		                    <!-- 指定生成文件分类 -->
		                    <attachArtifactClassifier>pg</attachArtifactClassifier>
		                    <options>
		                        <!-- JDK目标版本1.7-->
		                        <option>-target 1.8</option>
		                        <!-- 不做收缩（删除注释、未被引用代码）-->
		                        <option>-dontshrink</option>
		                        <!-- 不做优化（变更代码实现逻辑）-->
		                        <option>-dontoptimize</option>
		                        <option>-keepdirectories</option>
		                        <!-- 不路过非公用类文件及成员-->
		                        <option>-dontskipnonpubliclibraryclasses</option>
		                        <option>-dontskipnonpubliclibraryclassmembers</option>
		                        <!-- 优化时允许访问并修改有修饰符的类和类的成员 -->
		                        <option>-allowaccessmodification</option>
		                        <!-- 确定统一的混淆类的成员名称来增加混淆-->
		                        <option>-useuniqueclassmembernames</option>
		                        <!-- 不混淆所有包名，本人测试混淆后WEB项目问题实在太多，毕竟Spring配置中有大量固定写法的包名-->
		                        <option>-keeppackagenames</option>
		                        <!-- 不混淆所有特殊的类-->
		                        <option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</option>
		                        <!-- 不混淆所有的set/get方法 -->
		                        <option>-keepclassmembers public class * {void set*(***);*** get*();}</option>
		                        
		                        
		                        <!-- 不混淆所有的接口-->
		                        <option>-keep interface **.*{ *;}</option>
								<!-- 算了所有类都不改名字-->
								<option>-keep class **.* </option>
		                        
		                        
		                        <!-- 不混淆所有枚举，序列化类-->
		                        <option>-keep enum **.*{ *;}</option>
		                        <!-- 		序列化类 <option>-keep public class * implements java.io.Serializable{public protected private *;}</option> -->
		
		                        <!-- 不混淆job包下的所有类名，且类中的方法也不混淆-->
		                        <option>-keep class com.dstz.**.job.** { &lt;methods&gt;; }</option>
		                        
		                        <!-- 抽象类的方法、与子类不同包，保持可用-->
		                        <option>-keep class com.dstz.bus.util.* { &lt;methods&gt;; }</option>
		                        <option>-keep class com.dstz.chart.util.SqlUtil { &lt;methods&gt;; }</option>
		                        <option>-keep class com.dstz.form.model.FormCustDialog { &lt;methods&gt;; }</option>
		                        <option>-keep class com.dstz.form.model.custdialog.* { &lt;methods&gt;; }</option>
		                        <option>-keep class com.dstz.form.generatecode.GenCodeService { &lt;methods&gt;; }</option>
		                        <option>-keep class com.dstz.form.service.FormCustDialogServiceFactory { &lt;methods&gt;; }</option>
		                        
		                        
		                        
		                        <!-- Dao 层与mapper对应。这里不混淆-->
		                        <option>-keep class com.dstz.*.*.dao.**</option>
		                        
		                        <option>-keep class com.dstz.form.util.tableexcel.BusinessTableExcellor { &lt;methods&gt;; }</option>
		                    </options>
		                    <outjar>${project.build.finalName}-pg.jar</outjar>
		                    <!-- 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 -->
		                    <libs>
		                        <lib>${java.home}/lib/rt.jar</lib>
		                        <lib>${java.home}/lib/jsse.jar</lib>
		                    </libs>
		                    <!-- 加载文件的过滤器
		                    <inFilter>\*</inFilter>-->
		                    <!-- 要处理的jar-->
		                    
		                    <injar>${project.build.finalName}.jar</injar>
		                    <outjar>${project.build.finalName}-small.jar</outjar>
		                    <!-- 输出目录-->
		                    <outputDirectory>${project.build.directory}</outputDirectory>
		                </configuration>
		                <dependencies>
		                	<dependency>
		                        <groupId>net.sf.proguard</groupId>
		                        <artifactId>proguard-base</artifactId>
		                        <version>5.3.3</version>
		                    </dependency>
		                </dependencies>
		            </plugin>
        		</plugins>
        	
        	</pluginManagement>
        </build>
</project>